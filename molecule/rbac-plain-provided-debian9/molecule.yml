---
### Installs Confluent Platform Cluster on Debian9.
### RBAC enabled.
### SASL PLAIN enabled.
### TLS with custom certs enabled.
### Kafka Broker Customer Listener.
### Secrets protection enabled.
### Control Center disabled, metrics reporters enabled.
### LdapAuthenticateCallbackHandler for AuthN
driver:
  name: docker
platforms:
  - name: ldap1
    hostname: ldap1.confluent
    groups:
      - ldap_server
    image: centos:centos8
    dockerfile: ../Dockerfile-centos8-base.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ${KRAFT_CONTROLLER:-zookeeper}1
    hostname: ${KRAFT_CONTROLLER:-zookeeper}1.confluent
    groups:
      - ${CONTROLLER_HOSTGROUP:-zookeeper}
      - ${CONTROLLER_HOSTGROUP:-zookeeper}_migration
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ${KRAFT_CONTROLLER:-zookeeper}2
    hostname: ${KRAFT_CONTROLLER:-zookeeper}2.confluent
    groups:
      - ${CONTROLLER_HOSTGROUP:-zookeeper}
      - ${CONTROLLER_HOSTGROUP:-zookeeper}_migration
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ${KRAFT_CONTROLLER:-zookeeper}3
    hostname: ${KRAFT_CONTROLLER:-zookeeper}3.confluent
    groups:
      - ${CONTROLLER_HOSTGROUP:-zookeeper}
      - ${CONTROLLER_HOSTGROUP:-zookeeper}_migration
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker1
    hostname: kafka-broker1.confluent
    groups:
      - kafka_broker
      - kafka_broker_migration
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker2
    hostname: kafka-broker2.confluent
    groups:
      - kafka_broker
      - kafka_broker_migration
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-broker3
    hostname: kafka-broker3.confluent
    groups:
      - kafka_broker
      - kafka_broker_migration
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: schema-registry1
    hostname: schema-registry1.confluent
    groups:
      - schema_registry
      - schema_registry_migration
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-rest1
    hostname: kafka-rest1.confluent
    groups:
      - kafka_rest
      - kafka_rest_migration
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: kafka-connect1
    hostname: kafka-connect1.confluent
    groups:
      - kafka_connect
      - kafka_connect_migration
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  - name: ksql1
    hostname: ksql1.confluent
    groups:
      - ksql
      - ksql_migration
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
  # Testing metrics reporter logic when c3 not in inventory
  # - name: control-center1
  #   hostname: control-center1.confluent
  #   groups:
  #     - control_center
  #   image: geerlingguy/docker-debian9-ansible
  #   dockerfile: ../Dockerfile-debian.j2
  #   command: ""
  #   volumes:
  #     - /sys/fs/cgroup:/sys/fs/cgroup:ro
  #   privileged: true
  #   published_ports:
  #     - "9021:9021"
  #   networks:
  #     - name: confluent
  # Cluster 2 (Kraft) goups, groupnames will be changed during converge phase
  - name: controller1-mig
    hostname: controller1-mig.confluent
    groups:
      - kafka_controller_migration
    image: geerlingguy/docker-debian9-ansible
    dockerfile: ../Dockerfile-debian.j2
    command: ""
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    privileged: true
    networks:
      - name: confluent
provisioner:
  playbooks:
    converge: ${MIGRATION_CONVERGE:-../collections_converge.yml}
  inventory:
    group_vars:
      all:
        scenario_name: rbac-plain-provided-debian9
        
        sasl_protocol: plain
        rbac_enabled: true
        custom_java_path: /opt/jdk17 # Use custom Java 17
        kafka_broker_custom_listeners:
          external_listener:
            name: EXTERNAL
            port: 9094
            sasl_protocol: none
        mds_super_user: mds
        mds_super_user_password: password
        schema_registry_ldap_user: schema_registry
        schema_registry_ldap_password: password
        kafka_connect_ldap_user: kafka_connect
        kafka_connect_ldap_password: password
        ksql_ldap_user: ksql
        ksql_ldap_password: password
        kafka_rest_ldap_user: kafka_rest
        kafka_rest_ldap_password: password
        control_center_ldap_user: control_center
        control_center_ldap_password: password
        kafka_broker_custom_properties:
          listener.security.protocol.map: INTERNAL:SASL_PLAINTEXT,BROKER:SASL_PLAINTEXT,EXTERNAL:SASL_PLAINTEXT
          listener.name.external.sasl.oauthbearer.jwks.endpoint.url: https://dev-59009577.okta.com/oauth2/aus96p2og3u7Cpwu65d7/v1/keys
          listener.name.external.sasl.oauthbearer.expected.audience: api://default
          listener.name.external.oauthbearer.sasl.jaas.config: org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required;
          listener.name.external.oauthbearer.sasl.server.callback.handler.class: org.apache.kafka.common.security.oauthbearer.secured.OAuthBearerValidatorCallbackHandler
          listener.name.external.principal.builder.class: io.confluent.kafka.security.authenticator.OAuthKafkaPrincipalBuilder
          listener.name.external.sasl.enabled.mechanisms: OAUTHBEARER
          confluent.oauth.groups.claim.name: groups
          confluent.metadata.server.user.store: LDAP_WITH_OAUTH
          confluent.metadata.server.oauthbearer.jwks.endpoint.url: https://dev-59009577.okta.com/oauth2/aus96p2og3u7Cpwu65d7/v1/keys
          confluent.metadata.server.oauthbearer.expected.issuer: https://dev-59009577.okta.com/oauth2/aus96p2og3u7Cpwu65d7
          confluent.metadata.server.oauthbearer.expected.audience: Confluent,api://default,https://my-company.com
          confluent.metadata.server.oauthbearer.sub.claim.name: sub
          confluent.metadata.server.oauthbearer.groups.claim.name: groups
          ldap.java.naming.factory.initial: com.sun.jndi.ldap.LdapCtxFactory
          ldap.com.sun.jndi.ldap.read.timeout: 3000
          ldap.java.naming.provider.url: ldap://ldap1:389
          ldap.java.naming.security.principal: uid=mds,OU=rbac,DC=example,DC=com
          ldap.java.naming.security.credentials: password
          ldap.java.naming.security.authentication: simple
          ldap.user.search.base: OU=rbac,DC=example,DC=com
          ldap.group.search.base: OU=rbac,DC=example,DC=com
          ldap.user.name.attribute: uid
          ldap.user.memberof.attribute.pattern: CN=(.*),OU=rbac,DC=example,DC=com
          ldap.group.name.attribute: cn
          ldap.group.member.attribute.pattern: CN=(.*),OU=rbac,DC=example,DC=com
          ldap.user.object.class: account
        rbac_component_additional_system_admins:
          - User:user1
      ldap_server:
        ldaps_enabled: false
        ldap_admin_password: ldppassword
        ldap_rbac_group: rbac
        ldap_dc: example
        ldap_dc_extension: com
        ldap_users:
          - username: "{{schema_registry_ldap_user}}"
            password: "{{schema_registry_ldap_password}}"
            uid: 9998
            guid: 98
          - username: "{{kafka_connect_ldap_user}}"
            password: "{{kafka_connect_ldap_password}}"
            uid: 9997
            guid: 97
          - username: "{{ksql_ldap_user}}"
            password: "{{ksql_ldap_password}}"
            uid: 9996
            guid: 96
          - username: "{{control_center_ldap_user}}"
            password: "{{control_center_ldap_password}}"
            uid: 9995
            guid: 95
          - username: "{{kafka_rest_ldap_user}}"
            password: "{{kafka_rest_ldap_password}}"
            uid: 9994
            guid: 94
          - username: "{{mds_super_user}}"
            password: "{{mds_super_user_password}}"
            uid: 9993
            guid: 93
          - username: user1
            password: user1p
            uid: 9992
            guid: 92